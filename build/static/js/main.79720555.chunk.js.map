{"version":3,"sources":["Results.js","Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["Results","title","img","ing","className","style","width","margin","src","alt","Searchbar","handleSubmit","updateSearch","search","onSubmit","type","placeholder","id","value","onChange","App","useState","food","setFood","setSearch","query","setQuery","isloading","setLoading","APP_URL","useEffect","fetch","then","response","json","data","hits","role","event","preventDefault","e","target","map","meal","key","recipe","label","image","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOAiBeA,EAdC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAMC,EAAW,EAAXA,IAAIC,EAAO,EAAPA,IAExB,OACA,yBAAKC,UAAU,OAAOC,MAAO,CAACC,MAAO,QAASC,OAAO,QACrD,yBAAKH,UAAU,6BAA6BI,IAAKN,EAAKO,IAAI,QAC1D,yBAAKL,UAAU,aACb,wBAAIA,UAAU,cAAa,2BAAIH,IAC/B,uBAAGG,UAAU,wBAAwBD,GACrC,4BAAQC,UAAU,mBAAlB,YCISM,EAZG,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,aAAaC,EAAU,EAAVA,OAE3C,OACA,6BACE,0BAAMC,SAAUH,EAAcP,UAAU,eACtC,2BAAOW,KAAK,OAAQC,YAAY,gBAAgBZ,UAAU,4BAA4Ba,GAAG,uBAAuBC,MAAOL,EAAQM,SAAUP,IACzI,4BAAQG,KAAK,SAASX,UAAU,wBAAhC,a,MC4DOgB,MA/Df,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEeF,mBAAS,IAFxB,mBAENR,EAFM,KAEEW,EAFF,OAGYH,mBAAS,WAHrB,mBAGNI,EAHM,KAGAC,EAHA,OAImBL,oBAAS,GAJ5B,mBAINM,EAJM,KAIKC,EAJL,KAMPC,EAAQ,mCAAD,OAAqCJ,EAArC,0EAsCb,OALAK,qBAAU,WA9BVF,GAAW,GAGXG,MAAMF,GACLG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,GAAW,GACXL,EAAQY,EAAKC,WAyBb,CAACX,IAID,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAI,0BAAMiC,KAAK,MAAM5B,IAAI,SAArB,yFACJ,kBAAC,EAAD,CAAWE,aAxBE,SAAA2B,GAEnBZ,EAASb,GAETyB,EAAMC,iBACNf,EAAU,KAmBmCZ,aAd1B,SAAA4B,GACnBhB,EAAUgB,EAAEC,OAAOvB,QAasDL,OAAQA,KAG7E,8BACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,iCAAf,IAAiDuB,EAAU,0BAAMvB,UAAU,UAAhB,gBAAoC,+BAA/F,KACA,yBAAKA,UAAU,iCAChBkB,EAAKoB,KAAI,SAACC,GAAD,OAAQ,kBAAC,EAAD,CAASC,IAAKD,EAAKE,OAAOC,MAAO7C,MAAO0C,EAAKE,OAAOC,MAAO5C,IAAKyC,EAAKE,OAAOE,MAAO5C,IAAKwC,EAAKE,OAAOG,0BCjD1GC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79720555.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Results = ({title,img,ing})=>{\n\n    return (\n    <div className=\"card\" style={{width: \"20rem\", margin:\"1em\"}}>\n    <img className=\"card-img-top img-thumbnail\" src={img} alt=\"Car\"/>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\"><b>{title}</b></h5>\n      <p className=\"card-text text-muted\">{ing}</p>\n      <button className=\"btn btn-primary\">Order</button>\n    </div>\n  </div>\n    )};\n\n\nexport default Results;","import React from 'react'\n\n\nconst Searchbar = ({handleSubmit, updateSearch,search})=>{\n\n    return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"form-inline\">\n        <input type=\"text\"  placeholder=\"search food..\" className=\"form-control mb-2 mr-md-2\" id=\"inlineFormInputName2\" value={search} onChange={updateSearch}/>\n        <button type=\"submit\" className=\"btn btn-primary mb-2\">Search</button>\n      </form>\n    </div>\n    )};\n\n\nexport default Searchbar;\n\n\n","import React, {useEffect,useState} from 'react';\nimport Results from './Results.js'\nimport Searchbar from './Searchbar.js'\nimport './App.css';\n\n\nfunction App() {\n  const [food, setFood] = useState([])\n  const [search, setSearch] = useState(\"\")\n  const [query,setQuery] = useState(\"chicken\")\n  const [isloading, setLoading] = useState(false)\n  \n  const APP_URL= `https://api.edamam.com/search?q=${query}&app_id=2acf9af2&app_key=4a51638f5ed048ffd648a956f22b257e&from=0&to=10`\n\nconst getFood = ()=>{\n  setLoading(true)\n\n\n  fetch(APP_URL)\n  .then(response => response.json())\n  .then(data => {\n    setLoading(false);\n    setFood(data.hits);\n  \n  });\n\n  \n}\n\n\nconst handleSubmit = event => {\n  \n  setQuery(search);\n\n  event.preventDefault();\n  setSearch(\"\")\n};\n\n\n\nconst updateSearch = e => {\n  setSearch(e.target.value);\n};\n\n\n  useEffect(()=>{\n    getFood();\n  },[query]);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1><span role=\"img\" alt=\"donut\">🍕🍣🥤🍔🥗🍝🍩</span></h1>\n        <Searchbar handleSubmit={handleSubmit} updateSearch={updateSearch} search={search}/>\n \n      </header>\n      <main>\n        <div className=\"container\">\n          <div className=\"row justify-content-md-center\"> {isloading?<span className=\"loader\">🍕</span> :<span></span> } </div>\n          <div className=\"row justify-content-md-center\">\n        {food.map((meal)=><Results key={meal.recipe.label} title={meal.recipe.label} img={meal.recipe.image} ing={meal.recipe.ingredientLines}/>)}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}